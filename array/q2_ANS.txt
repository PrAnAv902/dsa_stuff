1. Find common elements in 3 sorted arrays


#include <iostream>
#include<vector>
using namespace std;

int main()
{
   vector<int> arr;
     vector<int> final;
    int arr1[10];
    int arr2[10];
    int arr3[10];
    int i=0;
    while(i<10){
        cin>>arr1[i];
        i++;
    }
    int j=0;
    while(j<10){
        cin>>arr2[j];
        j++;
    }
    int k=0;
    while(k<10){
        cin>>arr3[k];
        k++;
    }
    int a=0;
    int b=0;
    int c=0;
    while(a<10 && b<10){
        if(arr1[a]<arr2[b]){
            a++;
        }
        else if(arr1[a]>arr2[b]){
            b++;
        }
        else if(arr1[a]==arr2[b]){
            arr.push_back(arr1[a]);
            a++;
            b++;
        }
    }
    int d=0;
    while(c<10 && d<arr.size()){
        if(arr3[c]<arr[d]){
            c++;
        }
        else if(arr3[c]>arr[d]){
            d++;
        }
        else if(arr3[c]==arr[d]){
            final.push_back(arr3[c]);
            c++;
            d++;
        }
    }
    int z=0;
    while(z<final.size()){
        cout<<final[z]<<" ";
        z++;
    }
}

-------------------------------------------------------------------------------------------

2. Find first repeating element in array( done with sorting can also be done using map)

#include <iostream>
#include<bits/stdc++.h>
using namespace std;

int main()
{
  
    int arr[10];

    int i=0;
    while(i<10){
        cin>>arr[i];
        i++;
    }
    sort(arr,arr+10);
    int j=0;
    while(j<10){
        if(arr[j]==arr[j+1]){
            cout<<arr[j];
            break;
        }
        j++;
    }
}

-------------------------------------------------------------------------------------------

3. Find first non-repeating element in array( done with sorting can also be done using map)

#include <iostream>
#include<bits/stdc++.h>
using namespace std;

int main()
{
  
    int arr[10];

    int i=0;
    while(i<10){
        cin>>arr[i];
        i++;
    }
    sort(arr,arr+10);
    int j=0;
    while(j<10){
        if(arr[j]!=arr[j+1]){
            cout<<arr[j];
            break;
        }
        j++;
    }

}

-------------------------------------------------------------------------------------------

4. Find subarrays with equal 0s and 1s

#include <bits/stdc++.h>
 
using namespace std;
 
int countSubarrWithEqualZeroAndOne(int arr[], int n)
{
    map<int, int> mp;
    int sum = 0;
    int count = 0;
    for (int i = 0; i < n; i++) {
       
        if (arr[i] == 0)
            arr[i] = -1;
 
        sum += arr[i];
 
        if (sum == 0)
            count++;
 
         
        if (mp[sum])
            count += mp[sum];
       
          
        if (mp[sum] == 0)
            mp[sum] = 1;
        else
            mp[sum]++;
    }
    return count;
}
 
int main()
{
    int arr[] = { 1, 0, 0, 1, 0, 1, 1 };
 
    int n = sizeof(arr) / sizeof(arr[0]);
 
    cout << "count="
         << countSubarrWithEqualZeroAndOne(arr, n);
}

-------------------------------------------------------------------------------------------

5. Find subarray with 0 sum in an array

    #include<unordered_map>
    bool subArrayExists(int arr[], int n)
    {
    unordered_map<int,int>map;
    int i=0;
    int sum=0;
    while(i<n)
    {
        sum+=arr[i];
        map[sum]++;
        if(map[sum]>1 || arr[i]==0 || sum==0)
        {
            return true;
        }
        i++;
    }
    return false;
    }

-------------------------------------------------------------------------------------------

6. Find factorial of a large number

#include<bits/stdc++.h>
class Solution {
public:

    vector<int> factorial(int n){
        vector<int> a;
        vector<int>a1;
        a.push_back(1);
        int i=2;
        while(i<=n){
            int carry=0;
            int j=0;
            while(j<a.size()){
                int b=(a[j]*i)+carry;
                a[j]=b%10;
                carry=b/10;
                j++;
            }
            while(carry>0){
                a.push_back(carry%10);
                carry/=10;
            }
            
        
            i++;
        }
        int k=a.size()-1;
        while(k>=0){
            a1.push_back(a[k]);
            k--;
        }
        return a1;
    }
    
};

-------------------------------------------------------------------------------------------

7. Minimum platforms problem

#include<bits/stdc++.h>
    int findPlatform(int arr[], int dep[], int n)
    {
       sort(arr,arr+n);
       sort(dep,dep+n);
       int a=1;
       int ans=1;
       int i=1;
       int j=0;
       while(i<n && j<n){
           if(arr[i]<=dep[j]){
               a++;
               i++;
               if(a>ans)
               ans=a;
           }
           else{
               a--;
               j++;
           }
           
       }
       return ans;
    }

-------------------------------------------------------------------------------------------

8. Minimise the height II 


int getMinDiff(int arr[], int n, int k) {
     
       int maxv,minv,diff,i;
      
      sort(arr,arr+n);
      
      maxv=arr[n-1];
      minv=arr[0];
      
      diff=maxv-minv;
      
      
      for(i=1;i<n;i++){
          
         if(arr[i]-k<0){
              continue;
          }
          
          minv=min(arr[0]+k,arr[i]-k);
          maxv=max(arr[n-1]-k,arr[i-1]+k);
          
          
          diff=min(diff,maxv-minv);
      }  
     
      return diff;
   
    }

-------------------------------------------------------------------------------------------

9. Majority element problem in array (or use sorting)

#include<unordered_map>
  public:
    int majorityElement(int a[], int size)
    {
        
        unordered_map<int,int> map;
        int i=0;
        while(i<size)
        {
            map[a[i]]++;
            i++;
        }
  int j=0;
  int k=size/2;
  while(j<size)
  {
      if(map[a[j]]>k)
      {
          return a[j];
      }
      j++;
  }
  return -1;
        
    }

-------------------------------------------------------------------------------------------

10. Array subset of another array(or sort and use 2 pointer approach)

#include<unordered_map>
string isSubset(int a1[], int a2[], int n, int m) {
    unordered_map<int,int>map;
    int i=0;
    while(i<n)
    {
        map[a1[i]]++;
        i++;
    }
    int j=0;
    while(j<m)
    {
        if(map[a2[j]]==0)
        {
            return "No";
        }
        j++;
    }
    return "Yes";
}


-------------------------------------------------------------------------------------------

1. Input : 123 
   Output :1 2 3
           1 23
           12 3
           123
Print these combinations.


#include <iostream>
using namespace std;

void allcombinations(string input,string output,int index){
    if(index==input.size()){
        cout<<output<<endl;
        return;
    }
    
    output.push_back(input[index]);
    allcombinations(input,output,index+1);
  if(input[index+1]!='\0'){  
        output.push_back(' ');
    allcombinations(input,output,index+1);
  
   }
}

int main()
{
    string input;
    cin>>input;
    cout<<endl;
    string output="";
    int index=0;
    allcombinations(input,output,index);
}

-----------------------------------------------------------------------------------------------------

2. Given a value of n you have to generate all the binary sequence of length 2*n where sum of the bits on the left half is equal to the sum of the bits on the right half.

Input:- 2

Outpt:- 0000
        0110
        0101
        1010
        1001
        1111


#include <iostream>
using namespace std;

void findsequences(int leftsum,int rightsum,char* arr,int i,int j){
    if(i>j){
        if(leftsum==rightsum) cout<<arr<<endl;
        return;
    } 
    
    arr[i]='0';
    arr[j]='0';
    findsequences(leftsum,rightsum,arr,i+1,j-1);
    
    arr[i]='0';
    arr[j]='1';
    findsequences(leftsum,rightsum+1,arr,i+1,j-1);
    
    arr[i]='1';
    arr[j]='0';
    findsequences(leftsum+1,rightsum,arr,i+1,j-1);
    
    arr[i]='1';
    arr[j]='1';
    findsequences(leftsum+1,rightsum+1,arr,i+1,j-1);
}

int main()
{
  int n;
  cin>>n;
  char* arr = new char[2*n];
  findsequences(0,0,arr,0,2*n-1);
}

1. Letter Tile Possibilities

Input: tiles = "AAB"
Output: 8
Explanation: The possible sequences are "A", "B", "AA", "AB", "BA", "AAB", "ABA", "BAA".


 void solve(string tiles,string output,set<string>&result,map<int,bool>&flag){
        for(int i=0;i<tiles.size();i++){
            if(flag[i]==false){
                output.push_back(tiles[i]);
                flag[i]=true;
                result.insert(output); 
                solve(tiles,output,result,flag);
                flag[i]=false;
                output.pop_back();
            }
        }
    }
    int numTilePossibilities(string tiles) {
        string output="";
        set<string>result;
        map<int,bool>flag;
        solve(tiles,output,result,flag);
        return result.size();
    }

----------------------------------------------------------------------------------------------------------

2. Generate Parentheses

Input: n = 3
Output: ["((()))","(()())","(())()","()(())","()()()"]


   void solve(string output,vector<string>&ans,int ob,int cb){
        if(ob==0 && cb==0){
            ans.push_back(output);
            return;
        }
        if(ob>0){
            output.push_back('(');
            ob--;
            solve(output,ans,ob,cb);
            output.pop_back();
            ob++;
        }
        if(cb>ob){
            output.push_back(')');
            cb--;
            solve(output,ans,ob,cb);
            output.pop_back();
            cb++;
        }
        
    }
    vector<string> generateParenthesis(int n) {
        string output="(";
        vector<string>ans;
        int ob,cb;
        ob=n-1;
        cb=n;
        solve(output,ans,ob,cb);
        return ans;
    }

----------------------------------------------------------------------------------------------------------

3. Beautiful Arrangement

Input: n = 3
Output: 3
Explanaion: 1 2 3 
            2 1 3 
            3 2 1 


 int total=0;
   void solve(int index,vector<int> nums){
         if(index>=nums.size()){
            for(auto it:nums){
                cout<<it<<" ";
            }
             cout<<endl;
             total++;
             return;
         }
        for(int i=index;i<nums.size();i++){
            
            int condition1 = nums[i]%(index+1); 
            int condition2 = (index+1)%(nums[i]); 
            if(condition1==0 || condition2==0){
                 swap(nums[i],nums[index]);
                 solve(index+1,nums);
                 swap(nums[i],nums[index]);
            }
        }

    }
    int countArrangement(int n) {
        int index=0;
        vector<int>nums;
        int i=0;
        while(i<n){
            nums.push_back(i+1);
            i++;
        }
       solve(index,nums);
        
        return  total;
    }

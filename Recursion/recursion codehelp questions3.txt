1. Subsets of an array

Input: nums = [1,2,3]
Output: [[],[1],[2],[1,2],[3],[1,3],[2,3],[1,2,3]]


 void solution(vector<vector<int>>&ans,vector<int>output,int index,vector<int>nums){
        if(index==nums.size()){
           ans.push_back(output);
            return;
        }
         //exclude
        solution(ans,output,index+1,nums);
         //include
        output.push_back(nums[index]);
        solution(ans,output,index+1,nums);
    }
    vector<vector<int>> subsets(vector<int>& nums) {
        vector<vector<int>>ans;
        vector<int>output;
        int index=0;
        solution(ans,output,index,nums);
        return ans;
    }


2. Subsequences of a string

Input: str="abc"
Output: a ab abc ac b bc c

void solve(vector<string>& ans, string str, string output, int i) {
    if(i==str.length()) {
        if(output.length()>0)  //on the compiler it was not taking empty string as output-> ""
        ans.push_back(output);
        return;
        }
    
    //exclude
    solve(ans, str, output, i+1);
    //include
    output.push_back(str[i]);
    solve(ans, str, output, i+1);
}

vector<string> subsequences(string str){
	
	vector<string> ans;
    string output = "";
    solve(ans,str,output,0);
    return ans;
	
}

3. Letter Combinations of a Phone Number

Input: digits = "23"
Output: ["ad","ae","af","bd","be","bf","cd","ce","cf"]


void solution(vector<string>&ans,string output,int index,string digits, string mapping[]){
    if(index==digits.size()){ 
        if(output.size()>0)
        ans.push_back(output);
        return;
    }
    string x=mapping[digits[index]-48];
    for(int i=0;i<x.size();i++){
        output.push_back(x[i]); 
        solution(ans,output,index+1,digits,mapping); 
        output.pop_back();
    }
}

vector<string> letterCombinations(string digits){
    vector<string>ans;
    if(digits.size()==0) return ans;
    string output="";
    int index=0;
    string mapping[10] = {"", "", "abc", "def", "ghi", "jkl","mno","pqrs","tuv","wxyz"};
    solution(ans,output,index,digits,mapping);
    return ans; 
}


4. Permutations

Input: nums = [1,2,3]
Output: [[1,2,3],[1,3,2],[2,1,3],[2,3,1],[3,1,2],[3,2,1]]

   void solve(vector<vector<int>>&ans,int index,vector<int> nums){
        if(index>=nums.size()){
            ans.push_back(nums);
            return;
        }
        for(int i=index;i<nums.size();i++){
            swap(nums[i],nums[index]);
            solve(ans,index+1,nums);
            swap(nums[i],nums[index]);// to bring it back to same state like in keypad problem
        }
    }
    vector<vector<int>> permute(vector<int>& nums) {
        vector<vector<int>> ans;
        int index=0;
        solve(ans,index,nums);
        return ans;
    }

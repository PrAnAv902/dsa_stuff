1. Combination Sum

Input: candidates = [2,3,6,7], target = 7
Output: [[2,2,3],[7]]
Explanation:
2 and 3 are candidates, and 2 + 2 + 3 = 7. Note that 2 can be used multiple times.
7 is a candidate, and 7 = 7.
These are the only two combinations.



 void solve(vector<vector<int>>&ans,vector<int> output,vector<int> candidates,int index,int target){
        if(target<=0){
            if(target==0){
                ans.push_back(output);
            }
            return;
        }
        for(int i=index;i<candidates.size();i++){
             output.push_back(candidates[i]);
             solve(ans,output,candidates,i,target-candidates[i]);
             output.pop_back();
        }
    }
    vector<vector<int>> combinationSum(vector<int>& candidates, int target) {
        vector<int> output;
        vector<vector<int>>ans;
        int index=0;
        solve(ans,output,candidates,index,target);
        return ans;
    }


---------------------------------------------------------------------------------------------------

2. Combination Sum II


Input: candidates = [10,1,2,7,6,1,5], target = 8
Output: 
[
[1,1,6],
[1,2,5],
[1,7],
[2,6]
]


 void solve(vector<vector<int>>&ans,vector<int> output,vector<int> candidates,int index,int   target){
        if(target<=0){
            if(target==0){
                ans.push_back(output);
            }
            return;
        }
        for(int i=index;i<candidates.size();i++){
             if(i>index && candidates[i]==candidates[i-1]){
                continue;
              }
            if(candidates[i]>target){
                break;
            }
             output.push_back(candidates[i]);
             solve(ans,output,candidates,i+1,target-candidates[i]);
             output.pop_back();
        }
    }
    vector<vector<int>> combinationSum2(vector<int>& candidates, int target) {
        vector<int> output;
        vector<vector<int>>ans;
        int index=0;
        sort(candidates.begin(),candidates.end());
        solve(ans,output,candidates,index,target);
        return ans;
    }


---------------------------------------------------------------------------------------------------


3. Combination Sum III

Input: k = 3, n = 9
Output: [[1,2,6],[1,3,5],[2,3,4]]
Explanation:
1 + 2 + 6 = 9
1 + 3 + 5 = 9
2 + 3 + 4 = 9
There are no other valid combinations.

k here signifies that you only have to take 3 digit number answers.



 void solve(vector<vector<int>>&ans,vector<int> output,vector<int> candidates,int index,int target,int k){
        if(k==0){
            if(target<=0){
            if(target==0){
                ans.push_back(output);
            }
            return;
        }
            return;
        }
       
        for(int i=index;i<candidates.size();i++){
            if(candidates[i]>target){
                break;
            }
             output.push_back(candidates[i]);
             solve(ans,output,candidates,i+1,target-candidates[i],k-1);
             output.pop_back();
        }
    }
   vector<vector<int>> combinationSum3(int k, int target) {
       vector<int>candidates;
       int i=0;
       while(i<9){
           candidates.push_back(i+1);
           i++;
       }
         vector<int> output;
        vector<vector<int>>ans;
        int index=0;
         solve(ans,output,candidates,index,target,k);
        return ans;
    }
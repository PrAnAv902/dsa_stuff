1. 2D ARRAY BINARY SEARCH IMPLEMENTATION 
#include <iostream>

using namespace std;

int main()
{
    int ans=1;
  int arr[3][3]={{1,5,9},{14,20,21},{30,34,43}};
  int u=0;
  int d=2;
  int mid=1;
  int row=0;
 while(u<=d){
     if(arr[mid][0]<=ans && arr[mid][2]>=ans){
         row=mid;
         break;
     }
     else if(arr[mid][0]>ans){
        d=mid-1;
     }
     else if(arr[mid][2]<ans){
         u=mid+1;
     }
     mid=(u+d)/2;
 }
 int l=0;
 int r=2;
 int md=1;
 while(l<=r)
 {
     if(arr[row][md]==ans)
     {
         cout<<"Element found at index:-> "<<row+1<<","<<md+1;
         break;
     }
      else if(arr[row][md]<ans){
          l=md+1;
      }
      else {
          r=md-1;
      }
        md=(l+r)/2;
 }
}

---------------------------------------------------------------------------------------------------------------------

2. Count Negative Numbers in a Sorted Matrix (https://leetcode.com/problems/count-negative-numbers-in-a-sorted-matrix/)

int countNegatives(vector<vector<int>>& v) {
int n=v.size(),ans=0;

    for(int i=0;i<n;i++){
        int l=0 , r=v[i].size();
        
        while(l<r){
           
            int mid=l+(r-l)/2;
            
            if(v[i][mid]<0)r=mid;
            
            else l=mid+1;
        }
        ans+=(v[i].size()- r) ;
        
        
    }
    return ans;
}

---------------------------------------------------------------------------------------------------------------------

3.  The K Weakest Rows in a Matrix

 vector<int> kWeakestRows(vector<vector<int>>& mat, int k) {
       vector<int>ans;
        multimap<int,int>mp;
        int i=0;
        int n=mat.size();
        while(i<n){
            int s=0;
            int e=mat[0].size();
            
            while(s<e){
             int mid=s+(e-s)/2;
                 if(mat[i][mid]==0){
                     e=mid;
                 }    
                else{
                    s=mid+1;
                }
            }
            mp.emplace(e,i);
            i++;
        }
      for(auto it:mp){
          if(k){
              ans.push_back(it.second);
              k--;
          }
          else{
              break;
          }
          
      }
        return ans;
    }

---------------------------------------------------------------------------------------------------------------------

4. Maximum Units on a Truck

int maximumUnits(vector<vector<int>>& boxTypes, int truckSize) {
        multimap<int,int>mp;
        int i=0;
        while(i<boxTypes.size()){
            int j=0;
            while(j<1){
                mp.emplace(boxTypes[i][j+1],boxTypes[i][j]);
                j++;
            }
            i++;
        }
        int ans=0;
        for(auto it=mp.rbegin();it!=mp.rend();it++){
            if(truckSize){
                if(truckSize >= it->second){
                    ans+=it->first * it->second;
                    truckSize-=it->second;
                }
                else{
                    ans+=it->first * truckSize;
                    truckSize=0;
                }
            }
        }
        return ans;
    }

---------------------------------------------------------------------------------------------------------------------


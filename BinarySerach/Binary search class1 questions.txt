Q1.Find the first occurence of the element K in the given sorted array/vector.

OR simply use lower_bound

#include <iostream>
#include<bits/stdc++.h>
using namespace std;

int main()
{
    int k;
    cin>>k;
    vector<int>a;
    a.push_back(1);
    a.push_back(2);
    a.push_back(3);
    a.push_back(5);
    a.push_back(5);
    a.push_back(5);
    a.push_back(7);
    a.push_back(7);
    a.push_back(9);
    a.push_back(10);
    a.push_back(11);

    int s=0;
    int e=a.size()-1;
    int mid=(s/2)+(e/2);
    int ans=-1;
    while(s<=e){
        if(a[mid]==k){
            ans=mid;
            e=mid-1;
        }
        else if(a[mid]<k){
            s=mid+1;
        }
        else{
            e=mid-1;
        }
        mid=(s/2)+(e/2);
    }
    cout<<ans;
                    
}

------------------------------------------------------------------------------------------------------------

Q2.Find the last occurence of the element K in the given sorted array/vector.

OR simply use upper_bound

#include <iostream>
#include<bits/stdc++.h>
using namespace std;

int main()
{
    int k;
    cin>>k;
    vector<int>a;
    a.push_back(1);
        a.push_back(2);
          a.push_back(3);
            a.push_back(5);
            a.push_back(5);
           a.push_back(5);
           a.push_back(7);
             a.push_back(7);
                a.push_back(9);
                 a.push_back(10);
                    a.push_back(11);
    int s=0;
    int e=a.size()-1;
    int mid=(s+e)/2;
    int ans=-1;
    while(s<=e){
        if(a[mid]==k){
            ans=mid;
            s=mid+1;
        }
        else if(a[mid]<k){
            s=mid+1;
        }
        else{
            e=mid-1;
        } 
        mid=(s+e)/2;
    }
   cout<<ans;                  
}

------------------------------------------------------------------------------------------------------------

Q3. Total occurences =upper-lower

------------------------------------------------------------------------------------------------------------

Q4. Find that index in the array whose index value = actual value at that index.

#include <iostream>
#include<bits/stdc++.h>
using namespace std;

int main()
{
    vector<int>a;
    a.push_back(-10);
        a.push_back(0);
          a.push_back(2);
            a.push_back(3);
            a.push_back(7);
         
    int s=0;
    int e=a.size()-1;
    int mid=(s+e)/2;
    while(s<e){
        if(a[mid]<mid){
            s=mid+1;
        }
        else{
            e=mid;
        } 
        mid=(s+e)/2;
    }
   cout<<s;                 
}


------------------------------------------------------------------------------------------------------------

Q5.(pivot element find)

#include <iostream>
#include<bits/stdc++.h>
using namespace std;

int main()
{
  int arr[10]={9,10,1,2,3,4,5,6,7,8};
 int s=0;
 int e=9;
 int mid=(s+e)/2;
 while(s<e){
     if(arr[0]<=arr[mid]){
          s=mid+1;
     }
     else{
        e=mid;
     } 
     mid=(s+e)/2;
 }
 cout<<s;
}

------------------------------------------------------------------------------------------------------------

Q6. Given a sorted and rotated array A of N distinct elements which is rotated at some point, and given an element key. The task is to find the index of the given element key in the array A.

Example 1:

Input:
N = 9
A[] = {5, 6, 7, 8, 9, 10, 1, 2, 3}
key = 10
Output:
5
Explanation: 10 is found at index 5.


 #include<vector>
using namespace std;

int getPivot(vector<int>& arr, int n) {

    int s = 0;
    int e = n-1;
    int mid = s + (e-s)/2;

    while(s<e) {

        if(arr[mid] >= arr[0])
        {
            s = mid+1;
        }
        else{
            e = mid;
        }
        mid = s + (e-s)/2;
    }
    return s;
}

int binarySearch(vector<int>& arr, int s, int e, int key) {

    int start = s;
    int end = e;

    int mid = start + (end-start)/2;

    while(start <= end) {

        if(arr[mid] == key) {
            return mid;
        }

        //go to right wala part
        if(key > arr[mid]) {
            start = mid + 1;
        }
        else{ //key < arr[mid]
            end = mid - 1;
        }

        mid = start + (end-start)/2;
    }
    
    return -1;
}



int findPosition(vector<int>& arr, int n, int k)
{
    int pivot = getPivot(arr, n);
    if( k >= arr[pivot] && k <= arr[n-1])
    {//BS on second line
        return binarySearch(arr, pivot, n-1, k);
    }
    else
    {//BS on first line
        return binarySearch(arr, 0, pivot - 1, k);
    }
    
}
------------------------------------------------------------------------------------------------------------

Q7. Peak Index in a Mountain Array

 int peakIndexInMountainArray(vector<int>& arr) {
        int s=0;
        int e=arr.size()-1;
        int mid= s+(e-s)/2;
        
        while(s<e){
            if(arr[mid]<arr[mid+1]){
                s=mid+1;
            }
            else{
                 e=mid;
            }
            mid= s+(e-s)/2;
        }
        return s;
    }

------------------------------------------------------------------------------------------------------------

Q8. Square root using binary search

 int mySqrt(int x) {
        int s=0;
        int e=x;
        long long int mid=s+(e-s)/2;
        int i=0;
        
        int  ans=x;
        while(s<=e){
            long long int sq=mid*mid;
           if(sq==x){
               return mid;
           }
            else if(sq <x){
              ans=mid;
                s=mid+1;
               
            }
            else{
               e=mid-1;
            }
            mid=s+(e-s)/2;
        }
        return ans;
    }

------------------------------------------------------------------------------------------------------------

Q9. Check if N and its double exists

bool checkIfExist(vector<int>& arr){
dort(arr.begin(),arr.end());
for(int i=0;i<arr.size();i++){
//positive number
if(arr[i]>=0 && binarySearch(arr,i+1,arr.size()-1,2*arr[i])) return true;
//negative number
if(arr[i]<0 && arr[i]%2==0 && binarySearch(arr,i+1,arr.size()-1,arr[i]/2)) return true;
}
return false;
}

------------------------------------------------------------------------------------------------------------

Q10. Search in a sorted array of unknown size

int findPosition(int arr[],int target){
int s=0,e=1;
int val=arr[s];

while(val<target){
s=e;
e=2*e;
val=arr[e];
}
return binarySearch(arr,s,e,target);
}